#include<iostream>
using namespace std;

struct node
{
int data;
//int flag_l=0;
//int flag_r=0;

node* left;
node* right;
};
class bst
{
public:
node* insert(int n)     //inserting
{
struct node* n1;
n1=new node();
n1->data=n;
n1->left=NULL;
n1->right=NULL;
return n1;
}
node* insert1(node* root,int val)
{
if(root==NULL)
{
return insert(val);
}
if(root->data>val)
{
root->left=insert1(root->left,val);
}
else if(root->data<val)
{
root->right=insert1(root->right,val);
}
return root;
}
node* search(node* root,int key)   //searching
{
if(root==NULL)
{
return NULL;
}
else if(root->data==key)
{
return root;
}
else if(key<root->data)
{
search(root->left,key);
}
else
{
search(root->right,key);
}

}
void inorder(node* root)      //inorder traversal
{
if(root!=NULL)
{
inorder(root->left);
cout<<root->data<<" ";
inorder(root->right);
}
}
};

int main()
{
bst t1;
node* root=NULL;

do
{
if(root==NULL)
{
cout<<"Enter the root node"<<endl;
int r;
cin>>r;
root=t1.insert(r);
}
else
{
int ch;

cout<<"Press 1 to insert"<<endl<<"Press 2 to search"<<endl<<"Press 3 to inorder display"<<endl;;
cin>>ch;
switch(ch)
{
case 1:
int n2;
cout<<"Enter the data part"<<endl;
cin>>n2;
t1.insert1(root, n2);
break;
case 2:
cout<<"Enter the value to be searched"<<endl;
int n;
cin>>n;
node* p;
p=t1.search(root,n);
if(p==NULL)
{
cout<<"Element not found"<<endl;
}
else
{
cout<<"Found "<<p->data<<endl;
}
break;
case 3:
t1.inorder(root);
cout<<endl;
break;
}

}
}while(1);

return 0;
}
