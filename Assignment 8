#include<iostream>
using namespace std;
class sp_tree
{
int a[10][10];
int sp[10][10];
int V;
int E;
int Min_Cost;
int infinity;

public:
sp_tree()
{
infinity=99;
for(int i=0; i<10;i++)
for(int j=0;j<10;j++)
{
a[i][j]=0;
sp[i][j]=0;
}
}
void create_graph();
void display_graph();
void Prims();
void display_spanning_tree();


};
void sp_tree :: create_graph()
{
int i,j;
char ch;
cout<<"enter No. of vertices";
cin>>V;

do
{
cout<< "enter Edge";
cin>>i>>j;
cout<< " enter cost of an edge "<< i << " to "<<j;
cin>>a[i][j];
a[j][i]=a[i][j];
cout<<" Add another Edge ? ";
cin>>ch;
}while(ch=='y');
}

void sp_tree::display_graph()
{
for(int i=0;i<V;i++)
{
for( int j= 0; j<V; j++)
cout<< a[i][j] <<"\t";
cout<<"\n";
}
}

void sp_tree::display_spanning_tree()
{
cout<< " Spanning Tree For Given Graph is : \n";
for(int i=0;i<V;i++)
{
for( int j= 0; j<V; j++)
cout<< sp[i][j] <<"\t";
cout<<"\n";
}

cout<< " Minimum Cost of MST is : "<< Min_Cost;
}

void sp_tree::Prims()
{
int cost[10][10], dist[10], source[10], visited[10];
int mindist, v, u, i, j;

// create cost matrix

for(i=0;i<V;i++)
{
for(j= 0; j<V; j++)
if(a[i][j]==0)
cost[i][j]=infinity;
else
cost[i][j]=a[i][j];
}

// start from vertex no. 0

dist[0]=0;
visited[0]=1;

// Calculate dist all all vertices from Vertex 0

for(i=1;i<V;i++)
{
dist[i]= cost[0][i];
source[i]= 0;
visited[i]=0;
}
           
Min_Cost=0;
E=V-1;

while(E>0)
{
mindist=infinity;

// Find edge with minimum weight from source vertex
for(i=1;i<V;i++)
{
if(visited[i]==0 && dist[i]< mindist)
{
mindist= dist[i];
v= i;
}
}

// add edge in spanning tree and mark vertex as visited
u = source[v];
sp[u][v]= dist[v];
sp[v][u]=dist[v];
E--;
visited[v]=1;

for(i=1;i<V; i++)
{
if(visited[i]==0 && cost[i][v]< dist[i])
{
dist[i]= cost[i][v];
source[i]=v;
}
}
Min_Cost= Min_Cost + cost[u][v];

}
}

int main()
{
sp_tree T1;
T1.create_graph();
T1.display_graph();
T1.Prims();
T1.display_spanning_tree();
return 0;
}
